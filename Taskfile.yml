# Notes
# - install task from: https://taskfile.dev/#/installation or use `setup-cpp --task true`
# - If using Visual Studio, either run the following commands inside the Visual Studio command prompt (vcvarsall) or set CMAKE_GENERATOR to "Visual Studio 17 2022"
# The templates called in the other tasks. The variables can be set using the `vars` parameter or by enviroment variables. The variables are not automatically forwared to the called tasks

version: 3

tasks:
  build_template:
    # This template accepts the generator, build type and feature flags defined by the vars. Other flags can be passed by `CONFIGURE_FLAGS` and `BUILD_FLAGS`. For example, a specific target can be built by setting BUILD_FLAGS to "--target <NAME>"
    - cmake ./ -B ./build -G '{{.CMAKE_GENERATOR | default "Ninja Multi-Config"}}' -DCMAKE_BUILD_TYPE:STRING={{.CMAKE_BUILD_TYPE}} -DFEATURE_TESTS:BOOL={{.FEATURE_TESTS}} -DFEATURE_DOCS:BOOL='{{.FEATURE_DOCS | default "OFF"}}' {{.CONFIGURE_FLAGS}}
    - cmake --build ./build --config {{.CMAKE_BUILD_TYPE}} {{.BUILD_FLAGS}}

  test_template:
    cmds:
      # build before testing
      - task: build_template
        vars:
          CMAKE_GENERATOR: "{{.CMAKE_GENERATOR}}"
          CMAKE_BUILD_TYPE: "{{.CMAKE_BUILD_TYPE}}"
          FEATURE_TESTS: "{{.FEATURE_TESTS}}"
          FEATURE_DOCS: "{{.FEATURE_DOCS}}"
          CONFIGURE_FLAGS: "{{.CONFIGURE_FLAGS}}"
          BUILD_FLAGS: "{{.BUILD_FLAGS}}"

      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail

      - cd build/my_exe/test && ctest -C {{.CMAKE_BUILD_TYPE}} --output-on-failure
      - cd build/my_header_lib/test && ctest -C {{.CMAKE_BUILD_TYPE}} --output-on-failure
      - cd build/my_lib/test && ctest -C {{.CMAKE_BUILD_TYPE}} --output-on-failure

  coverage_template: |
    {{if eq OS "windows"}}
      OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children --quiet -- {{.TEST_COMMAND}}
    {{else}}
      {{.TEST_COMMAND}}
      gcovr -j {{.nproc | default 1}} --delete --root ./ --print-summary --xml-pretty --xml coverage.xml ./build --gcov-executable {{.GCOV_EXECUTABLE | default "gcov"}}
    {{end}}

  release:
    - task: build_template
      vars:
        CMAKE_BUILD_TYPE: Release
        FEATURE_TESTS: OFF

  debug:
    - task: build_template
      vars:
        CMAKE_BUILD_TYPE: Debug
        FEATURE_TESTS: OFF

  build:
    - task: release

  install:
    - task: release
    - cmake --install ./build --prefix {{.INSTALL_PREFIX | default "./install"}}
    - cd build && cpack -C Release -G {{.CPACK_GENERATOR | default "ZIP"}}

  test:
    - task: test_template
      vars:
        CMAKE_BUILD_TYPE: Debug
        FEATURE_TESTS: ON

  test_release_debug:
    - task: test_template
      vars:
        CMAKE_BUILD_TYPE: RelWithDebInfo
        FEATURE_TESTS: ON

  test_release:
    - task: test_template
      vars:
        CMAKE_BUILD_TYPE: Release
        FEATURE_TESTS: ON

  coverage:
    - task: coverage_template
      vars:
        TEST_COMMAND: task test
        nproc: "{{.nproc}}"
        GCOV_EXECUTABLE: "{{.GCOV_EXECUTABLE}}"

  coverage_release_debug:
    - task: coverage_template
      vars:
        TEST_COMMAND: task test_release_debug
        nproc: "{{.nproc}}"
        GCOV_EXECUTABLE: "{{.GCOV_EXECUTABLE}}"

  coverage_release:
    - task: coverage_template
      vars:
        TEST_COMMAND: task test_release
        nproc: "{{.nproc}}"
        GCOV_EXECUTABLE: "{{.GCOV_EXECUTABLE}}"

  docs:
    - task: debug
      vars:
        FEATURE_DOCS: ON
        BUILD_FLAGS: --target doxygen-docs

  lint:
    - |
      {{if eq OS "windows"}}
        powershell -c '$files=(git ls-files --exclude-standard); foreach ($file in $files) { if ((get-item $file).Extension -in ".cpp", ".hpp", ".c", ".cc", ".cxx", ".hxx", ".ixx") { clang-format -i -style=file $file } }'
      {{else}}
        git ls-files --exclude-standard | grep -E '\.(cpp|hpp|c|cc|cxx|hxx|ixx)$' | xargs clang-format -i -style=file
      {{end}}
    - |
      {{if eq OS "windows"}}
      powershell -c '$files=(git ls-files --exclude-standard); foreach ($file in $files) { $item=(get-item $file); if (($item.Name -eq "CMakeLists.txt") -or ($item.Extension -in ".cmake")) { cmake-format --in-place $file; cmake-lint $file --disabled-codes C0103 C0301 R0912 R0915 R0913 --suppress-decorations } }'
      {{else}}
        git ls-files --exclude-standard | grep -E '(CMakeLists\.txt)|(\.(cmake))$' | xargs cmake-format --in-place | xargs cmake-lint --disabled-codes C0103 C0301 R0912 R0915 R0913 --suppress-decorations
      {{end}}

    - ~/vcpkg/vcpkg format-manifest ./vcpkg.json
    - npx -y cspell lint --no-progress --show-suggestions

  clean: |
    {{if eq OS "windows"}}
      powershell -c 'function rmrf($path) { if (test-path $path) { rm -r -force $path }}; rmrf ./build; rmrf; rmrf ./install'
    {{else}}
      rm -rf ./build ./install
    {{end}}
