name: ci
on:
  pull_request:
  release:
    types: [published]
  push:
    branches:
      - main
      - develop

jobs:
  Test:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.os }}
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-20.04
          - macos-10.15
          - windows-2019
        compiler:
          # you can specify the version after `-` like "llvm-13.0.0".
          - llvm-13.0.0
          - gcc-11
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug

        exclude:
          # mingw is determined by this author to be too buggy to support
          - os: windows-2019
            compiler: gcc-11

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc-11
            gcov_executable: gcov
          - compiler: llvm-13.0.0
            gcov_executable: "llvm-cov gcov"

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            package_generator: TBZ2

          # This exists solely to make sure a non-multiconfig build works
          - os: ubuntu-20.04
            compiler: gcc-11
            generator: "Unix Makefiles"
            build_type: Debug
            gcov_executable: gcov

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            package_generator: ZIP

    steps:
      - uses: actions/checkout@v2

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          developer_mode: ${{ matrix.developer_mode }}
          generator: ${{ matrix.generator }}

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          vcpkg: true
          ccache: true
          clangtidy: true

          cppcheck: true

          gcovr: true
          opencppcoverage: true

      - name: Initialize CodeQL
        if: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'llvm') }}
        uses: github/codeql-action/init@v1
        with:
          languages: "cpp"

        # make sure coverage is only enabled for Debug builds, since it sets -O0 to make sure coverage
        # has meaningful results
      - name: Configure CMake
        run: |
          cmake -S ./ -B ./build -G "${{matrix.generator}}" -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -DFEATURE_TESTS=true

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}}

      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          (cd ./build/my_exe/test && ctest -C ${{matrix.build_type}} --output-on-failure)
          (cd ./build/my_header_lib/test && ctest -C ${{matrix.build_type}} --output-on-failure)
          (cd ./build/my_lib/test && ctest -C ${{matrix.build_type}} --output-on-failure)

          gcovr -j ${{env.nproc}} --delete --root ./ --print-summary --xml-pretty --xml coverage.xml ./build --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- powershell -C '
            cd ./build/my_exe/test; ctest -C ${{matrix.build_type}} --output-on-failure; cd ../../../
            cd ./build/my_header_lib/test; ctest -C ${{matrix.build_type}} --output-on-failure; cd ../../../
            cd ./build/my_lib/test; ctest -C ${{matrix.build_type}} --output-on-failure; cd ../../../      
          '

      - name: Perform CodeQL Analysis
        if: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'llvm') }}
        uses: github/codeql-action/analyze@v1

      - name: CPack
        if: matrix.package_generator != ''
        working-directory: ./build
        run: |
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
        with:
          files: |
            build/*-*${{ matrix.build_type }}*-*.*

      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml
